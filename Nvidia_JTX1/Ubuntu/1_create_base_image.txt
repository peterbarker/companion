# TX1 setup script for use as companion computer

# STEP1: Run ONE of STEP1A or STEP1B

# STEP1a : install NVidia image onto TX1 (skip this step if you already have a factory image (created in Step2) for the current release of JetPack

# Connect TX1 via USB to Ubuntu machine and put TX1 into bootloader mode:
#    Hold Force Recovery button (aka "REC"), press Reset button(aka "RST"), Release Force Recovery button
#    On Ubuntu machine "lsusb", and look for "NVidia Corp"
#
# for TX1:
# Install JetPack on an Ubuntu 16.04 machine (a Vagrantfile has been supplied!), while connected to the internet:
# download JetPack from nvidia.com
# These instructions last executed using JetPack-L4T-3.3-linux-x64_b39.run
# from the directory you want JetPack installed into (e.g. JetPack-3.1) run the Jetack installer.  This must not be in /vagrant.
# e.g.:
mkdir jetpack
cd jetpack
sh /vagrant/JetPack-L4T-3.3-linux-x64_b39.run
#  -  may need to run it twice to get the GUI to actualy run
#    select Jetson TX1 Development Kit and Ubuntu Host
#    On JetPack L4T Component Manager:
#        * Host: set "no action" for everything
#        * For Target - Jetson TX?: mixed
#           * Linux for Tegra (TX? 64bit): install
#              * File System and OS: install
#              * Drivers: install
#           * Flash OS Image to Target: install
#        Install on Target
#           * CUDA Toolkit for L4T: install
#           * Compile CUDA Samples: no action
#           * cuDNN Package: install
#           * TensorRT: install
#           * Multimedia API package: no action
#           * OpenCV for Tegra: install
#        * VisionWorks on TX1 Target: no action
#    Click Next, and Accept All
#    "Network Layout" screen should appear:
#       Select "Device accesses Internet via router/switch", Next
#       Select network adapter to use to connect to TX (i.e. eth0 if your Ubuntu machine uses eth0 to access your local internet)
#       when "Post Installation Jetson TX1, Following actions will be performed at this stage.." screen appears click Next
#    Black screen, "Please put your device to Force USB Recovery Mode", press <Enter>
#       Vagrant: use "watch lsusb" on the VM and get the nvidia device showing
#       NOTE!  For TX2 the device must NOT be on a USB1.1 bus!
#       Eventually, "Finished Flashing OS, Please press Reset button on device, Press Enter key to continue" will be displayed, press <Enter>
#       If it gets stuck at "Determining the IP address of the target" (typical when using Vagrant), you can log onto the console of the TX1 and modify the IP address in report_ip_address_to_host script; 192.168.1.100

#
# STEP1A part 2 : Download base image from TX1 (e.g. if you want to take a copy of the factory image)
#    put TX1 into bootloader mode: Hold Force Recovery button (aka "REC"), press Reset button(aka "RST"), Release Force Recovery button
#    cd to directory where JetPack was installed (e.g. ~/jetpack)
cd 64_TX1/Linux_for_Tegra_64_tx1/bootloader
REPO=/vagrant # (e.g.)
IMAGE=/vagrant/tx1_image_jetpack31_factory.img
$REPO/download_image.sh $IMAGE  #  <-- image will be saved to this file.  this will take about 1hour and 40 minutes


#
#
# STEP1B: if you want to re-use a factory image (e.g. one downloaded in STEP2):
#   (possibly bring up Vagrant virtual machine)
BASEDIR=~/jetpack
TEGRAFLASH=$BASEDIR/64_TX1/Linux_for_Tegra_64_tx1/bootloader/tegraflash.py
ls $TEGRAFLASH
APPLET=$BASEDIR/64_TX1/Linux_for_Tegra_64_tx1/bootloader/nvtboot_recovery.bin
ls $APPLET
CBOOT=$BASEDIR/64_TX1/Linux_for_Tegra_64_tx1/bootloader/cboot.bin
ls $CBOOT
IMAGE_NAME="/vagrant/image-factory-20171124/image_jetpack_3.1_factory-app.img" # (e.g.)
ls $IMAGE_NAME
sudo $TEGRAFLASH --bl $CBOOT --applet $APPLET --chip 0x21 --cmd "write APP $IMAGE_NAME"  # about 60m
#
# STEP2 : Download base image from TX1 (e.g. if you want to take a copy of the factory image)
#    put TX1 into bootloader mode: Hold Force Recovery button (aka "REC"), press Reset button(aka "RST"), Release Force Recovery button
#    cd to directory where JetPack was installed (i.e. JetPack-2.3.1)
#    cd 64_TX1/Linux_for_Tegra_64_tx1/bootloader
#    copy in download_image.sh from this repo
#    ./download_image.sh tx1_image_jetpack231_factory.img    <-- image will be saved to this file.  this will take about 1hour and 40 minutes

#
# Step 3 : install packages on TX?
#    power on the TX
#    log onto TX as nvidia/nvidia (you may be able to do this over ethernet using the tegra-ubuntu hostname)
TEGRA=tegra-ubuntu.local
ssh nvidia@$TEGRA
#    create an apsync user:
sudo useradd -s /bin/bash -m -U -G sudo,netdev,users,dialout,video apsync
sudo passwd apsync # apsync

# move all of the Jetson stuff to be under APSync:
JETSON_STUFF_USER=ubuntu
if [ -d "/home/nvidia" ]; then
    JETSON_STUFF_USER=nvidia
fi

sudo rsync -aPH --delete /home/$JETSON_STUFF_USER/ /home/apsync
sudo chown -R apsync.apsync /home/apsync
pushd /home/$JETSON_STUFF_USER
  sudo rm -rf cudnn nv-gie-repo-ubuntu1604-ga-cuda8.0-trt2.1-20170614_1-1_arm64.deb cuda-l4t /home/nvidia/OpenCV4Tegra
popd

logout

# copy your private key over:
ssh-copy-id apsync@$TEGRA

ssh apsync@$TEGRA

cd ~
mkdir GitHub
pushd GitHub
git clone https://github.com/ArduPilot/companion.git
# usually at this point I rsync over that repository:
# rsync -aP companion/ apsync@$TEGRA:GitHub/companion --delete --delete-excluded --exclude=*.img.xz --exclude=*actory.img --exclude mav.tlog --exclude mav.tlog.raw --exclude=*/jetpack_download/*
pushd companion/Nvidia_JTX1/Ubuntu
sudo ./set-hostname   # reset the machine's hostname
sudo apt-get autoremove -y # avoid repeated no-longer-required annoyance
sudo ./change-autologin-user.sh
sudo ./remove-unattended-upgrades # 
sudo ./ensure_rc_local.sh
sudo ./disable_console.sh
sudo reboot # ensure hostname correct / console disabling OK / autlogin working

# on host:
TEGRA=apsync.local
ssh apsync@$TEGRA
pushd GitHub/companion/Nvidia_JTX1/Ubuntu
# consider exporting a http proxy:
# export http_proxy=http://bogg.local:3128/
time sudo -E ./2_install_packages.sh # 20m
time sudo -E ./install_niceties || echo "Failed" # 20s
time sudo -E ./3_wifi_access_point.sh # 20s
sudo ./4_setup_log_rotation # instant
time sudo -E ./6_setup_video.sh # 1m
time sudo -E ./8_setup_cmavnode.sh # ~4m
time sudo -E ./setup_mavlink-router # ~2m
time sudo -E ./7_dflogger.sh # ~210s
sudo ./5_setup_mavproxy.sh # instant
time sudo -E ./setup-video-streaming # 11s

time sudo -E apt-get install -y libxml2-dev libxslt1.1 libxslt1-dev
time sudo pip install future lxml # 4m
time sudo ./install_pymavlink # new version required for apweb #1m
time sudo ./install_apweb # 2m

time sudo -E ./install_openkai.sh

# reboot and test image according to testing.txt
sudo reboot

# Step 4: cleanup
pushd ~/GitHub/companion/Nvidia_JTX1/Ubuntu && sudo ./clean-for-imaging


sudo poweroff

# Step 5: download apsync image from TX1:
#    put TX1 into bootloader mode: Hold Force Recovery button (aka "REC"), press Reset button(aka "RST"), Release Force Recovery button
watch lsusb
#    cd to directory where JetPack was installed (i.e. JetPack-2.3.1)
BASEDIR=~/jetpack
cd $BASEDIR/64_TX1/Linux_for_Tegra_64_tx1/bootloader
#    run download_image.sh from this repo:
TIMESTAMP=`date '+%Y%m%d%H%M'`
# consider using an absolute path for IMAGE_NAME here! e.g. /vagrant/...
IMAGE_NAME="apsync-tx1-$TIMESTAMP.img"

TEGRAFLASH=$BASEDIR/64_TX1/Linux_for_Tegra_64_tx1/bootloader/tegraflash.py
ls $TEGRAFLASH
APPLET=$BASEDIR/64_TX1/Linux_for_Tegra_64_tx1/bootloader/nvtboot_recovery.bin
ls $APPLET
CBOOT=$BASEDIR/64_TX1/Linux_for_Tegra_64_tx1/bootloader/t210ref/cboot.bin
ls $CBOOT

sudo $TEGRAFLASH --bl $CBOOT --applet $APPLET --chip 0x21 --cmd "read APP $IMAGE_NAME" # about 1 hour 45 minutes

ls -l $IMAGE_NAME
time xz --verbose -e $IMAGE_NAME # about 7.5 hours
COMPRESSED_IMAGE_NAME="$IMAGE_NAME.xz"
ls -l --si  $COMPRESSED_IMAGE_NAME # ~5.2GB

# on host machine (not on the Vagrant VM!)
COMPRESSED_IMAGE_NAME="..."
ls -l --si  $COMPRESSED_IMAGE_NAME
time rsync -aP $COMPRESSED_IMAGE_NAME autotest@autotest.ardupilot.org:APM/buildlogs/binaries/Companion/next/$COMPRESSED_IMAGE_NAME # about 11.5 hours
